#!/usr/bin/env python3
"""
webcve - A simple framework for sending test payloads for known web CVEs.
"""

import os
import json
import argparse
import requests
from termcolor import cprint

DETECTED_CODE = 406
TESTS_PATH = 'tests/'
CVE_TESTS = os.listdir(TESTS_PATH)

def get_data_file(localfile):
    """
    Get data file contents
    """
    with open(localfile) as datafile:
        contents = datafile.read()

    return contents

if __name__ == '__main__':
    PARSER = argparse.ArgumentParser(description='Web CVE Tests.')
    PARSER.add_argument('-v', help='Dsiplay verbose output', default=False, action="store_true")
    PARSER.add_argument('-cve', help='Test specified CVE only, format: CVE-XXXX-XXXXX.')
    PARSER.add_argument('-url', help='Target URL to send payloads to, e.g. https://mytest-site.com.', required=True)
    PARSER.add_argument('-code', help='The server response status code that indicates the payload was succesfully detected.', default="403")
    ARGS = PARSER.parse_args()

    BASE_URL = ARGS.url

    if ARGS.code is not None:
        DETECTED_CODE = ARGS.code

    if ARGS.cve is not None:
        CVE_TESTS = [ARGS.cve]

    for name in CVE_TESTS:
        description = ''
        reference = ''

        cprint("{}".format(name), "yellow")

        if ARGS.v is True:
            if os.path.isfile('tests/{}/description.txt'.format(name)):
                with open('tests/{}/description.txt'.format(name)) as f:
                    description = f.read()

                    cprint(description, "white")

        if not os.path.isfile('tests/{}/test.json'.format(name)):
            cprint("\tTests not found for {}".format(name), "red")

        else:
            with open('tests/{}/test.json'.format(name)) as f:
                tests = json.load(f)

            for test in tests:
                if test['Method'].upper() == 'POST':

                    if 'Data' in test:
                        data = test['Data']

                    if 'Data-File' in test:
                        data = get_data_file('tests/{}/{}'.format(name, test['Data-File']))

                    response = requests.post('{}{}'.format(BASE_URL, test['URI']),
                                             headers=test['Headers'],
                                             data=data,
                                             allow_redirects=False)

                elif test['Method'].upper() == 'GET':
                    response = requests.get('{}{}'.format(BASE_URL, test['URI']),
                                            headers=test['Headers'],
                                            allow_redirects=False)

                if response.status_code == int(DETECTED_CODE):
                    cprint("\tTest passed ({})".format(response.status_code), "green")
                else:
                    cprint("\tTest failed ({})".format(response.status_code), "red")
