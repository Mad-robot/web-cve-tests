#!/usr/bin/env python3
"""
webcve
"""

import os
import json
import requests

BASE_URL = 'https://riskdiscovery.com'
DETECTED_CODE = 406
TESTS_PATH = 'tests/'
CVE_TESTS = os.listdir(TESTS_PATH)

class ConsoleColors(object):
    """
    Console colors
    """
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def get_data_file(localfile):
    with open(localfile) as datafile:
        data = datafile.read()

    return data

for name in CVE_TESTS:
    description = ''
    reference = ''

    print "{}{}{}".format(ConsoleColors.WARNING, name, ConsoleColors.ENDC)

    if os.path.isfile('tests/{}/description.txt'.format(name)):
        with open('tests/{}/description.txt'.format(name)) as f:
            description = f.read()

        print description

    if not os.path.isfile('tests/{}/test.json'.format(name)):
        print  "{}\tTests not found for {}{}".format(ConsoleColors.FAIL, name, ConsoleColors.ENDC)

    else:
        with open('tests/{}/test.json'.format(name)) as f:
            tests = json.load(f)

        for test in tests:
            if test['Method'].upper() == 'POST':

                if 'Data' in test:
                    data = test['Data']

                if 'Data-File' in test:
                    data = get_data_file('tests/{}/{}'.format(name, test['Data-File']))

                response = requests.post('{}{}'.format(BASE_URL, test['URI']),
                                         headers=test['Headers'],
                                         data=data,
                                         allow_redirects=False)

            elif test['Method'].upper() == 'GET':
                response = requests.get('{}{}'.format(BASE_URL, test['URI']),
                                        headers=test['Headers'],
                                        allow_redirects=False)

            if response.status_code == DETECTED_CODE:
                print "{}\tTest passed ({}){}".format(ConsoleColors.OKGREEN,
                                                      response.status_code,
                                                      ConsoleColors.ENDC)
            else:
                print  "{}\tTest failed ({}){}".format(ConsoleColors.FAIL,
                                                       response.status_code,
                                                       ConsoleColors.ENDC)
